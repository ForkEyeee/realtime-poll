@model realTimePolls.Models.PollItem

<form asp-controller="Poll" asp-action="Vote" method="post" id="form">
    <div class="vote-flex">
        <label for="vote-first">@Model.Poll.FirstOption</label><br>
        <input type="radio" id="vote-first" name="vote" value="Vote First" @(Model.Poll != null && Model.Vote == true ? "checked" : "")>
        <br />
        <label for="vote-second">@Model.Poll.SecondOption</label><br>
        <input type="radio" id="vote-second" name="vote" value="Vote Second" @(Model.Poll != null && Model.Vote == false ? "checked" : "")>
        <br />
        <input type="hidden" name="pollid" value="@Model.Poll.Id" />
        <input type="hidden" name="userid" value="@Model.Poll.UserId"  />
        <button type="submit" id="vote-btn"> Submit Vote</button>
        <input type="button" value="Delete" onclick="location.href='@Url.Action("Delete", "Poll", new { pollid = Model.Poll.Id })'" />
    </div>
</form>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>
        console.log('test')

        var oldData = @Html.Raw(Json.Serialize(@Model));

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/pollHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        async function start() {
            try {
                await hubConnection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        hubConnection.onclose(async () => {
            await start();
        });

        // Start the connection.
        start();

</script>
