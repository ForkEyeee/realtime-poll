@model realTimePolls.Models.PollsViewModel

<form asp-controller="Poll" asp-action="Vote" method="post" id="form">
    <div class="vote-flex">
        <label for="VoteFirst">@Model.Poll.FirstOption</label><br>
        <input type="radio" id="vote-first" name="vote" value="Vote First" @(Model.UserPoll != null && Model.UserPoll.FirstVote == true ? "checked" : "")>
        <br />
        <label for="vote-second">@Model.Poll.SecondOption</label><br>
        <input type="radio" id="vote-second" name="vote" value="Vote Second" @(Model.UserPoll != null && Model.UserPoll.SecondVote == true ? "checked" : "")>
        <br />
        <input type="hidden" name="pollid" value="@Model.Poll.Id" />
        <input type="hidden" name="userid" value="@Model.Poll.UserId"  />
        <button type="submit" id="vote-btn"> Submit Vote</button>
        <input type="button" value="Delete" onclick="location.href='@Url.Action("Delete", "Poll", new { pollid = Model.Poll.Id })'" />
    </div>
</form>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/pollHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await hubConnection.start();
            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    hubConnection.onclose(async () => {
        await start();
    });

    // Start the connection.
    start();

    const testBtn = document.getElementById("vote-btn")
    testBtn.addEventListener('click', async (e) => {
        // e.preventDefault()
        try {
            await hubConnection.invoke("SendMessage", "fork", "HEY!!!!!");
        } catch (err) {
            console.error(err.toString());
        }
    })

    hubConnection.on("ReceiveMessage", function  (user, message) {
        const getData = async () => {
            const url = "https://localhost:44378/Home/RefreshData"
            const response = await fetch(url, {
                headers: {
                    'Accept': 'application/json'
                }
            })
            const body = await response.json()
            console.log(body)
        }
        console.log(`${user} says ${message}`); 
        getData();
    });

</script>
<script>
    console.log(@Html.Raw(Json.Serialize(Model)))
</script>