@model realTimePolls.Models.PollItem;
@{
    var userId = ViewData["UserId"];
}


<div class="main">
    <div class="card">
    

        <div class="container">
            @if (Model.Poll.Genre != null)
            {
                <h2 class="fw-bold genre-heading">Genre: @Model.Poll.Genre.Name</h2>
            }
            <form asp-controller="Poll" asp-action="Vote" method="post" id="form">
                <ul>
                    <li>
                        <input type="radio" id="vote-first" name="vote" value="Vote First" @(Model.Poll != null && Model.Vote == true ? "checked" : "")>
                        <label for="vote-first">@Model.Poll.FirstOption</label>
                        <div class="check"><div class="inside"></div></div>
                    </li>
                    <li>
                        <input type="radio" id="vote-second" name="vote" value="Vote Second" @(Model.Poll != null && Model.Vote == false ? "checked" : "")>
                        <label for="vote-second">@Model.Poll.SecondOption</label>
                        <div class="check"><div class="inside"></div></div>
                    </li>
                </ul>
                <input type="hidden" name="pollid" value="@Model.Poll.Id" />
                <input type="hidden" name="userid" value="@Model.Poll.UserId" />
                <div class="d-flex justify-content-end gap-3 pt-4 ">
                    @if (Model.Poll.UserId == Convert.ToInt32(userId))
                    {
                        <input type="button" value="Delete" onclick="location.href='@Url.Action("Delete", "Poll", new { pollid = Model.Poll.Id })'" />
                    }
                    <button type="submit" class="btn btn-success" id="vote-btn">Submit Vote</button>
                </div>
            </form>
        </div>

    </div>
</div>


<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>


<style>
    .container {
        margin-bottom: 0
    }    

    body, html {
        height: 100%;
        background: #222222;
        font-family: 'Lato', sans-serif;
    }
</style>

<script>

        var oldData = @Html.Raw(Json.Serialize(@Model));

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/pollHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        async function start() {
            try {
                await hubConnection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        hubConnection.onclose(async () => {
            await start();
        });

        // Start the connection.
        start();
</script>
