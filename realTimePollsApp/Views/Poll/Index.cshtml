@model realTimePolls.Models.PollItem;
@{
    var userId = ViewData["UserId"];
}


<div class="main">
    <div class="card">
        <div class="container">
            @if (Model.Poll.Genre != null)
            {
                <h2 class="fw-bold genre-heading">Genre: @Model.Poll.Genre.Name</h2>
            }
            <form asp-controller="Poll" asp-action="Vote" method="post" id="form">
                <ul>
                    <li>
                        <input type="radio" id="vote-first" name="vote" value="Vote First" @(Model.Poll != null && Model.Vote == true ? "checked" : "")>
                        <label for="vote-first">@Model.Poll.FirstOption</label>
                        <div class="d-flex flex-column vote-flex">
                            <p class="float-end first-vote-count">@Model.FirstVoteCount Votes</p>
                        </div>
                        <div class="check"><div class="inside"></div></div>
                    </li>
                    <li>
                        <input type="radio" id="vote-second" name="vote" value="Vote Second" @(Model.Poll != null && Model.Vote == false ? "checked" : "")>
                        <label for="vote-second">@Model.Poll.SecondOption</label>
                        <div class="d-flex flex-column vote-flex">
                            <p class="float-end second-vote-count">@Model.SecondVoteCount Votes</p>
                        </div>
                        <div class="check"><div class="inside"></div></div>
                    </li>
                </ul>
                <input type="hidden" name="pollid" value="@Model.Poll.Id" />
                <input type="hidden" name="userid" value="@Model.Poll.UserId" />
                <div class="d-flex justify-content-end gap-3 mt-3">
                    @if (Model.Poll.UserId == Convert.ToInt32(userId))
                    {
                        <input type="button" value="Delete" onclick="location.href='@Url.Action("Delete", "Poll", new { pollid = Model.Poll.Id })'" />
                    }
                    <button type="submit" class="btn btn-success" id="vote-btn">Submit Vote</button>
                </div>
            </form>
        </div>

    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.14/signalr.min.js"></script>


<style>

    
    .vote-flex {
        height: 100px;
        justify-content: flex-end;
        align-items: flex-end;
    }
    
    .container {
        margin-bottom: 0
    }    

    body, html {
        height: 100%;
        background: #222222;
        font-family: 'Lato', sans-serif;
    }
    ul li {
    color: black;
    display: block;
    position: relative;
    float: left;
    width: 100%;
    height: 100px;
    border-bottom: 1px solid #333;
}

    ul li input[type=radio] {
        position: absolute;
        visibility: hidden;
    }

    ul li label {
        display: block;
        color: black;
        position: relative;
        font-weight: 300;
        font-size: 1.35em;
        padding: 20px 25px 25px 80px;
        margin: 10px auto;
        height: 30px;
        z-index: 9;
        cursor: pointer;
        -webkit-transition: all 0.25s linear;
        float: left
    }

    ul li:hover label {
        color: #AAAAAA;
    }

    ul li .check {
        display: block;
        cursor: pointer;
        position: absolute;
        border: 5px solid black;
        border-radius: 100%;
        height: 25px;
        width: 25px;
        top: 31px;
        left: 21px;
        z-index: 5;
        transition: border .25s linear;
        -webkit-transition: border .25s linear;
    }


    ul li:hover .check {
        border: 5px solid #AAAAAA;
    }

    ul li .check::before {
        content: '';
        display: block;
        position: absolute;
        border-radius: 100%;
        height: 10px; 
        width: 10px; 
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        margin: auto;
        transition: background 0.25s linear;
        -webkit-transition: background 0.25s linear;
    }
</style>

<script>

        var oldData = @Html.Raw(Json.Serialize(@Model));

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/pollHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        async function start() {
            try {
                await hubConnection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        hubConnection.onclose(async () => {
            await start();
        });

        // Start the connection.
        start();

        const getData = async (page) => {

        const baseURL = "https://realtime-poll.onrender.com/Polls/Index"
        const url = page === undefined ? baseURL : baseURL + `?page=${page}`

        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return polls
    }
</script>

<script>
    hubConnection.on("ReceiveMessage", async (user, message) => { //maybe add this to the sharedlayout instead
        try {
 
            const { polls } = await getData();

            const firstVotes = document.querySelectorAll(".first-votes");

            const firstVoteIds = Array.from(firstVotes).map(vote => parseInt(vote.parentElement.previousElementSibling.
                previousElementSibling.previousElementSibling.previousElementSibling.dataset.id))

            const secondVotes = document.querySelectorAll(".second-votes");

            const secondVoteIds = Array.from(secondVotes).map(vote => parseInt(vote.parentElement.previousElementSibling.
                previousElementSibling.previousElementSibling.previousElementSibling.dataset.id))

            for (let i = 0; i <= polls.length - 1; i++) {

                if (firstVoteIds.includes(polls[i].poll.id) && firstVotes[i].innerHTML != polls[i].firstVoteCount ||
                    secondVoteIds.includes(polls[i].poll.id) && secondVotes[i].innerHTML != polls[i].secondVoteCount) {
                    firstVotes[i].innerHTML = polls[i].firstVoteCount
                    secondVotes[i].innerHTML = polls[i].secondVoteCount
                    if (firstVotes[i].innerHTML > secondVotes[i].innerHTML) {
                        firstVotes[i].style.color = "green";
                        firstVotes[i].style.fontWeight = "bold";
                        firstVotes[i].style.transform = "scale(1.1)";
                        firstVotes[i].style.transition = "all 2s";

                        secondVotes[i].style.color = "red";
                        secondVotes[i].style.fontWeight = "bold";
                        secondVotes[i].style.transform = "scale(1.1)";
                        secondVotes[i].style.transition = "all 2s";
                    } else {
                        firstVotes[i].style.color = "red";
                        firstVotes[i].style.fontWeight = "bold";
                        firstVotes[i].style.transform = "scale(1.1)";
                        firstVotes[i].style.transition = "all 2s";

                        secondVotes[i].style.color = "green";
                        secondVotes[i].style.fontWeight = "bold";
                        secondVotes[i].style.transform = "scale(1.1)";
                        secondVotes[i].style.transition = "all 2s";
                    }
                }
            }
        } catch (e) {
            console.error(e);
        }
    });
</script>
