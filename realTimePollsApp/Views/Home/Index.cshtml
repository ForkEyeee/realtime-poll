@model realTimePolls.Models.PollsList
@{
    ViewBag.Message = @Model.UserProfilePicture;
}

<div class="text-center ">
    <input type="text" placeholder="Search by title" id="search-box"/>
    <div class="container pt-0 mt-0">    
        <table class="rwd-table">
            <tbody class="table-body">
                <tr>
                    <th>User</th>
                    <th>Title</th>
                    <th>First Option</th>
                    <th>Second Option</th>
                    <th>First Vote Count</th>
                    <th>Second Vote Count</th>
                </tr>

                @*Displays list of polls*@
                @if (Model != null)
                {
                    foreach (var poll in Model.Polls)
                    {
                        <tr class="table-data" onclick="window.location.href='@Url.Action("Index", "Poll", new { polltitle = poll.Poll.Title, pollid = poll.Poll.Id, userid = poll.Poll.UserId })'">
                            <td data-th="User" class="table-cell" >
                                <div class="d-flex flex-column gap-2 align-items-center">
                                  <img src="@poll.ProfilePicture" alt="user-image" class="avatar"/>
                                    <p class="mb-0 text-center">@poll.UserName</p>
                                </div>
                            </td>
                            <td data-th="Title" class="table-cell"  >
                                @poll.Poll.Title
                            </td>
                            <td data-th="First Option" class="table-cell">
                                @poll.Poll.FirstOption
                            </td>
                            <td data-th="Second Option" class="table-cell">
                                @poll.Poll.SecondOption
                            </td>
                            <td data-th="First Count" class="table-cell" >
                                <span class="first-votes">@poll.FirstVoteCount</span>
                            </td>
                            <td data-th="Second Count" class="table-cell" >
                                <span class="second-votes">@poll.SecondVoteCount</span>
                            </td>
                        </tr>
                    }

                }
            </tbody>
        </table>
    </div>
</div>




<div id="pagination-container" class="pagination">
    @*Pagination Widget created here*@
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>



<style>

    .pagination {
    display: inline-block;
}

    .pagination a {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
    }

        .pagination a.active {
            background-color: #4CAF50;
            color: white;
        }

        .pagination a:hover:not(.active) {
            background-color: #ddd;
        }

</style>


@*Connects client to signalR server*@
<script>
    const oldData = @Html.Raw(Json.Serialize(@Model));

    const getData = async (page) => {

        const baseURL = "https://localhost:44378/Polls/Index"
        const url = page === undefined ? baseURL : baseURL + `?page=${page}`
        
        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return polls
    }

    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/pollHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await hubConnection.start();
            console.log("SignalR Connected.");
            await getPolls();

        } catch (e) {
            console.error("Failed to connect with SignalR", e);
        }
    }

    hubConnection.onclose(async () => {
        await start();
    });

    // Start the connection.
    start();
</script>

@*Grid pagination*@
<script>
    async function getPolls() {
        try {
            const { polls, pollCount } = await getData()
            createPaginationButtons(polls, pollCount)
        } catch (e) {
            console.error("Failed to get polls", e);
        }
    }

    const updateGrid = async (page, e) => {
        try {
            const searchParams = new URLSearchParams(window.location.search);
            const page = searchParams.get('page')

            
            const { polls } = await getData(page);
            const table = document.querySelector(".rwd-table")
            const tableBody = document.querySelector(".table-body")

            document.querySelectorAll(".table-data").forEach(row => row.remove())

            const cells = ["User",
                "Title",
                "First Option",
                "Second Option",
                "First Count",
                "Second Count"]

            polls.forEach(poll => {
                console.log(poll)
                const tableRow = document.createElement("tr")
                tableRow.classList.add("table-data")
                table.appendChild(tableRow)

                tableRow.addEventListener('click', () => {
                    window.location.href = `/Poll?polltitle=${poll.poll.title}&pollid=${poll.poll.id}&userid=${poll.poll.userId}`
                })

                for (let i = 0; i <= 5; i++) {
                    const tableCell = document.createElement("td")
                    tableCell.setAttribute("data-th", cells[i])

                    let content;

                    switch (cells[i]) {
                        case "User":
                            const userContainer = document.createElement('div')
                            userContainer.classList.add('user-flex')
                            
                            const avatar = document.createElement('img')
                            avatar.src = poll.profilePicture
                            avatar.classList.add("avatar")
                            avatar.alt = 'user image'
                        
                            const userName = document.createElement('p')
                            userName.innerHTML = poll.userName
                        
                            userContainer.appendChild(avatar)
                            userContainer.append(userName)

                            tableCell.appendChild(userContainer)
                            tableRow.appendChild(tableCell)
                            continue;
                        case "Title":
                            const link = document.createElement("a")
                            link.innerHTML = poll.poll.title
                            content = poll.poll.title

                            tableRow.appendChild(tableCell)
                            tableCell.append(link)
                            continue;
                        case "First Option":
                            content = poll.poll.firstOption
                            break;
                        case "Second Option":
                            content = poll.poll.secondOption
                            break;
                        case "First Count":
                            tableCell.classList.add("first-votes")
                            content = poll.firstVoteCount
                            break;
                        case "Second Count":
                            tableCell.classList.add("second-votes")
                            content = poll.secondVoteCount
                            break;
                        default:
                            throw new Error("Unable to update grid")
                    }
                    
                    tableCell.innerHTML = content
                    tableRow.appendChild(tableCell)
                    tableBody.append(tableRow)

                }
            })
        }
        catch (e) {
            console.error(e)
        }
    }
    
    const updateActivePage = (node) => {
        const searchParams = new URLSearchParams(window.location.search);
        const page = searchParams.get('page')

            const btns = document.querySelectorAll(".pagination-btn")

            btns.forEach((btn, i) => {
                btn.classList.remove("active")
            if (btn.innerHTML === page) btn.classList.add("active")
            })
    }

    const getPaginationLength = (pollsLength) => {
        let paginationLength;

        if (pollsLength / 5 !== 0) {
            paginationLength = Math.ceil(pollsLength / 5)
        } else {
            paginationLength = pollsLength / 5
        }
        return paginationLength
    }


    const createPaginationButtons = (polls, pollCount) => {

        try {
            if (document.getElementById("pagination-container").childElementCount !== 0 || pollCount === 0) return

            const searchParams = new URLSearchParams(window.location.search);
            let page = searchParams.get('page')

            const baseURL = "https://localhost:44378/"
            const pollsLength = pollCount

            const paginationLength = getPaginationLength(pollsLength)

            const paginationContainer = document.getElementById("pagination-container")

            for (let i = 1; i <= paginationLength; i++) {
                if (i === 1) {
                    const prev = document.createElement("a")
                    prev.innerHTML = "&laquo;"

                    prev.addEventListener('click', (e, polls, pollsLength) => {
                        if (page === null || page == 1) return
                        
                        page = parseInt(page) - 1
                        const nextURL = baseURL + "?page=" + page.toString()
                        const nextTitle = 'Home';
                        const nextState = { additionalInformation: 'Updated the URL with JS' };

                        window.history.replaceState(nextState, nextTitle, nextURL);
                        updateActivePage(next)
                        updateGrid(page);
                    })

                    paginationContainer.appendChild(prev)
                }

                const btn = document.createElement("a")
                btn.classList.add("pagination-btn")
                btn.innerHTML = [i]
                paginationContainer.appendChild(btn)

                btn.addEventListener('click', (e) => {
                    if (e.target.innerHTML === page) return

                    const nextURL = baseURL + "?page=" + btn.innerHTML;
                    const nextTitle = 'Home';
                    const nextState = { additionalInformation: 'Updated the URL with JS' };

                    window.history.replaceState(nextState, nextTitle, nextURL);

                    updateActivePage(btn)
                    page = btn.innerHTML
                    updateGrid(page, e);
                })
            }

            const btns = document.querySelectorAll(".pagination-btn")
            const test = polls;

            btns.forEach((btn, i) => {
                if (btn.innerHTML === page) btn.classList.add("active")
                if (page === null && i === 0) btn.classList.add("active")

            })

            const next = document.createElement("a") 

            next.addEventListener('click', async (e) => {
                if (page === null) page = 2

                const { pollCount } = await getData(page);
                const paginationLength = getPaginationLength(pollCount)

                if (paginationLength == page) return

                page = parseInt(page) + 1
                const nextURL = baseURL + "?page=" + page.toString()
                const nextTitle = 'Home';
                const nextState = { additionalInformation: 'Updated the URL with JS' };

                window.history.replaceState(nextState, nextTitle, nextURL);
                updateActivePage(next)
                updateGrid(page);
            })

            next.innerHTML = "&raquo;"
            paginationContainer.appendChild(next)
        }
        catch (e) {
            console.error(e)
        }
   }
</script>

@*Updates the DOM after client receives message from the server*@
<script>
    hubConnection.on("ReceiveMessage", async (user, message) => { //maybe add this to the sharedlayout instead
        try {
            console.log('received')
            const searchParams = new URLSearchParams(window.location.search);
            let page = searchParams.get('page')

            const { polls } = await getData(page);

            const firstVotes = document.querySelectorAll(".first-votes");
            const secondVotes = document.querySelectorAll(".second-votes");

            if (firstVotes.length === 0 || secondVotes.length === 0) throw new Error('votes els not found.');
            if (polls.length !== firstVotes.length || polls.length !== secondVotes.length) throw new Error('length does not match');

            polls.forEach((poll, i) => {
                firstVotes[i].innerHTML = poll.firstVoteCount;
                secondVotes[i].innerHTML = poll.secondVoteCount;
            });

        } catch (e) {
            console.error(e);
        }
    });
</script>

<script>
    const url = "https://localhost:44378/"

    const getSearchResults = async (page) => {


        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        console.log(polls)
        updateGrid()

        return polls
    }

    const updateUrl = (text) => {
        let nextURL
        const currentUrl = window.location.href
        const baseUrl = "https://localhost:44378/"
        if (text === "") {
            nextURL = baseUrl
        } else {
            nextURL = baseUrl + !currentUrl.includes("search") ? "?search=" + text : "&search=" + text
        }

        const nextTitle = 'Home';
        const nextState = { additionalInformation: 'Updated the URL with JS' };
        window.history.replaceState(nextState, nextTitle, nextURL);

    }

    const searchBox = document.getElementById("search-box")
    searchBox.addEventListener('input', async (e) => {
        updateUrl(e.target.value)
    })

   


</script>



