@model realTimePolls.Models.PollsList


<div class="text-center">
    <button id="myBtn">Create Poll</button>
    <div id="myModal" class="modal">

        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>Create Poll</h2>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "Poll", FormMethod.Post))
                {
                    <div>
                        @Html.Label("Title", "Poll Title") @*first param is for, second is label text*@
                        @Html.TextBox("Title", string.Empty, new { @class = "input-class", @required = "required" }) @*first param is name, secodn is value*@
                    </div>
                    <div>
                        @Html.Label("FirstOption", "First Option")
                        @Html.TextBox("FirstOption", string.Empty, new { @class = "input-class", @required = "required" })
                    </div>
                    <div>
                        @Html.Label("SecondOption", "Second Option")
                        @Html.TextBox("SecondOption", string.Empty, new { @class = "input-class", @required = "required" })
                    </div>
                    
                    <div>
                        <input type="submit" value="Create Poll" class="btn btn-primary" />
                    </div>
                }
            </div>

            <div class="modal-footer">
                <h3>Modal Footer</h3>
            </div>
        </div>
    </div>

    <div>
        @if (Context.User.Identity.IsAuthenticated)
        {
            <h2 class="logo welcome">Welcome, @User.Identity.Name</h2>
        }
    </div>

        @*Displays list of polls*@
      
        @if (Model != null)
        { 
            foreach (var poll in Model.Polls)
            {   <ol>
                @Html.ActionLink(poll.Poll.Title, "Index", "Poll", new { polltitle = poll.Poll.Title, pollid = poll.Poll.Id, userid = poll.Poll.UserId }, null)
                    <li>First Option: @poll.Poll.FirstOption</li>
                    <li>Second Option: @poll.Poll.SecondOption</li>
                    <li class="first-votes">@poll.FirstVoteCount</li>
                    <li class="second-votes">@poll.SecondVoteCount</li>
                </ol>

            }    

        }

@*     <form asp-controller="Home" asp-action="Poll" method="post" id="form">
        <div>
            <label for="cars">Choose a poll:</label>
            <select name="pollName" id="polls">
                @if (Model != null)
                {
                    @foreach (var poll in Model.Polls)
                    {
                        <option value="@poll">@poll</option>
                    }
                    <button type="submit">Submit</button>
                    <div>@poll</div>
                    <div>@Model.SecondOption</div>

                }

            </select>


        </div>
    </form>
    <button id="test-btn">SEND TO ALL USERS</button> *@
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>
    const getData = async () => {
        const url = "https://localhost:44378/Polls/Index"
        const userId = {
            Id: hubConnection.connection.connectionId
        }
        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        console.log(polls)
        return polls
    }

    const oldData = @Html.Raw(Json.Serialize(@Model));

    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/pollHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await hubConnection.start();
            console.log("SignalR Connected.");
        } catch (e) {
            console.error("Failed to connect with SignalR", e);
        }
    }

    hubConnection.onclose(async () => {
        await start();
    });

    // Start the connection.
    start();
    // when you press ubmit, it is not updating the database until after the stuff below runs
    hubConnection.on("ReceiveMessage", async (user, message) => {
        try {
            console.log('received')
            const newData = await getData();

            const firstVotes = document.querySelectorAll(".first-votes");
            const secondVotes = document.querySelectorAll(".second-votes");

            if (firstVotes.length === 0 || secondVotes.length === 0) throw new Error('votes els not found.');
            if (newData.length !== firstVotes.length || newData.length !== secondVotes.length) throw new Error('length does not match');

            newData.forEach((data, i) => {
                firstVotes[i].innerHTML = data.firstVotes;
                secondVotes[i].innerHTML = data.secondVotes;
            });
        } catch (e) {
            console.error(e);
        }
    });

</script>
<script>

    var modal = document.getElementById("myModal");
    var btn = document.getElementById("myBtn");
    var span = document.getElementsByClassName("close")[0];

    btn.onclick = function () {
        modal.style.display = "block";
    }

    span.onclick = function () {
        modal.style.display = "none";
    }

    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
</script>
