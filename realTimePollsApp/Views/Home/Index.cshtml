@model realTimePolls.Models.PollsList


<div class="text-center">
    <button id="myBtn">Create Poll</button>
    <div id="myModal" class="modal">

        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>Create Poll</h2>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "Poll", FormMethod.Post))
                {
                    <div>
                        @Html.Label("Title", "Poll Title") @*first param is for, second is label text*@
                        @Html.TextBox("Title", string.Empty, new { @class = "input-class", @required = "required" }) @*first param is name, secodn is value*@
                    </div>
                    <div>
                        @Html.Label("FirstOption", "First Option")
                        @Html.TextBox("FirstOption", string.Empty, new { @class = "input-class", @required = "required" })
                    </div>
                    <div>
                        @Html.Label("SecondOption", "Second Option")
                        @Html.TextBox("SecondOption", string.Empty, new { @class = "input-class", @required = "required" })
                    </div>

                    <div>
                        <input type="submit" value="Create Poll" class="btn btn-primary" />
                    </div>
                }
            </div>

            <div class="modal-footer">
                <h3>Modal Footer</h3>
            </div>
        </div>
    </div>

    <div class="container">
      
            @if (Context.User.Identity.IsAuthenticated)
            {
                <h2 class="logo welcome">Welcome, @User.Identity.Name</h2>
            }
       
        <table class="rwd-table">
            <tbody>
                <tr>
                    <th>User</th>
                    <th>Title</th>
                    <th>First Option</th>
                    <th>Second Option</th>
                    <th>First Vote Count</th>
                    <th>Second Vote Count</th>
                </tr>

                @*Displays list of polls*@

                @if (Model != null)
                {
                    foreach (var poll in Model.Polls)
                    {

                        <tr class="table-data">
                            <td data-th="Title">
                                @Html.ActionLink(poll.Poll.Title, "Index", "Poll", new { polltitle = poll.Poll.Title, pollid = poll.Poll.Id, userid = poll.Poll.UserId }, null)

                            </td>
                            <td data-th="User">
                                @poll.Poll.UserId
                            </td>
                            <td data-th="Title">
                                @poll.Poll.Title
                            </td>
                            <td data-th="First Option">
                                @poll.Poll.FirstOption
                            </td>
                            <td data-th="Second Option">
                                @poll.Poll.SecondOption
                            </td>
                            <td data-th="Vote Count">
                                @poll.Poll.FirstOption: @poll.FirstVoteCount
                                @poll.Poll.SecondOption: @poll.SecondVoteCount

                            </td>
                        </tr>
                    }

                }
            </tbody>
        </table>
    </div>

    <div id="pagination-container" class="pagination">
 
     
@*         <a href="#">1</a>
        <a href="#" class="active">2</a>
        <a href="#">3</a>
        <a href="#">4</a>
        <a href="#">5</a>
        <a href="#">6</a> *@
      
    </div>
</div>


<style>
    .pagination {
        display: inline-block;
    }

        .pagination a {
            color: black;
            float: left;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color .3s;
        }

            .pagination a.active {
                background-color: #4CAF50;
                color: white;
            }

            .pagination a:hover:not(.active) {
                background-color: #ddd;
            }
</style>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

@*Connects client to signalR server*@
<script>
    const oldData = @Html.Raw(Json.Serialize(@Model));

    const getData = async (page) => {

        const baseURL = "https://localhost:44378/Polls/Index"
        const url = page === undefined ? baseURL : baseURL + `?page=${page}`
        
        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return polls
    }

    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/pollHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await hubConnection.start();
            console.log("SignalR Connected.");
            await getPolls();

        } catch (e) {
            console.error("Failed to connect with SignalR", e);
        }
    }

    hubConnection.onclose(async () => {
        await start();
    });

    // Start the connection.
    start();
</script>

@*Grid pagination*@
<script>
    async function getPolls() {
        try {
            const { polls, pollCount } = await getData()
            console.log(polls)
            console.log(pollCount)
            createPaginationButtons(polls, pollCount)
        } catch (e) {
            console.error("Failed to get polls", e);
        }
    }

    const updateGrid = async (page) => {
        try {

            const { polls } = await getData(page);
            const table = document.querySelector(".rwd-table")

            document.querySelectorAll(".table-data").forEach(row => row.remove())

            const cells = ["Title", "User", "First Option",
                "Second Option", "First Vote Count", "Second Vote Count"]

            polls.forEach(poll => {
                const tableRow = document.createElement("tr")
                tableRow.classList.add("table-data")
                table.appendChild(tableRow)

                for (let i = 0; i <= 5; i++) {
                    const tableCell = document.createElement("td")
                    tableCell.setAttribute("data-th", cells[i])

                    let content;

                    switch (cells[i]) {
                        case "Title":
                            content = poll.poll.title
                            break;
                        case "User":
                            content = poll.poll.user
                            break;
                        case "First Option":
                            content = poll.poll.firstOption
                            break;
                        case "Second Option":
                            content = poll.poll.secondOption
                            break;
                        case "First Vote Count":
                            content = poll.firstVoteCount
                            break;
                        case "Second Vote Count":
                            content = poll.secondVoteCount
                            break;
                        default:
                            throw new Error("Unable to update grid")
                    }

                    tableRow.appendChild(tableCell)
                    tableCell.innerHTML = content

                }
            })
        }
        catch (e) {
            console.error(e)
        }
    }
    
    const updateActivePage = (node) => {
        console.log('update')
        const searchParams = new URLSearchParams(window.location.search);
        const page = searchParams.get('page')
        // if (node.innerHTML === searchParams.get('page')) {
            const btns = document.querySelectorAll(".pagination-btn")
            // if(btns.length !== 5) return
            btns.forEach((btn, i) => {
                btn.classList.remove("active")
            if (btn.innerHTML === page) btn.classList.add("active")
            })


        // }
    }

    const createPaginationButtons = (polls, pollCount) => {

        try {
            if (document.getElementById("pagination-container").childElementCount !== 0) throw new Error("Pagination Widget already exists")

            const searchParams = new URLSearchParams(window.location.search);
            let page = searchParams.get('page')

            const baseURL = "https://localhost:44378/"
            const pollsLength = pollCount

            let paginationLength;

            if (pollsLength / 5 !== 0) {
                paginationLength = Math.ceil(pollsLength / 5)
            } else {
                paginationLength = pollsLength / 5
            }

            const paginationContainer = document.getElementById("pagination-container")

            for (let i = 1; i <= paginationLength; i++) {
                if (i === 1) {
                    const prev = document.createElement("a")
                    prev.innerHTML = "&laquo;"

                    prev.addEventListener('click', (e, polls, pollsLength) => {
                        if (page === null) page = 2
                        page = parseInt(page) - 1
                        const nextURL = baseURL + "?page=" + page.toString()
                        const nextTitle = 'Home';
                        const nextState = { additionalInformation: 'Updated the URL with JS' };

                        window.history.replaceState(nextState, nextTitle, nextURL);
                        updateActivePage(next)
                        updateGrid(page);
                    })

                    paginationContainer.appendChild(prev)
                }

                const btn = document.createElement("a")
                btn.classList.add("pagination-btn")
                btn.innerHTML = [i]
                paginationContainer.appendChild(btn)

                btn.addEventListener('click', (e) => {
                    const nextURL = baseURL + "?page=" + btn.innerHTML;
                    const nextTitle = 'Home';
                    const nextState = { additionalInformation: 'Updated the URL with JS' };

                    window.history.replaceState(nextState, nextTitle, nextURL);
                    
                    updateActivePage(btn)
                    page = btn.innerHTML
                    updateGrid(page);
                })
            }

            // const searchParams = new URLSearchParams(window.location.search);
            // let page = searchParams.get('page')
            const btns = document.querySelectorAll(".pagination-btn")
            const test = polls;

            btns.forEach((btn, i) => {
                if (btn.innerHTML === page) btn.classList.add("active")
                if (page === null && i === 0) btn.classList.add("active")

            })

            const next = document.createElement("a") 

            next.addEventListener('click', (e, polls, pollsLength) => {
                if (page === null) page = 2
                // if (document.querySelectorAll(".pagination-btn").length <= 5) return
                //check if the length of th epolls returned is 0. if so, then dont do this
                // polls and pollsLength are undefined here, maybe make a request here instead of using func param;
                // do the same for prev btn.
                page = parseInt(page) + 1
                const nextURL = baseURL + "?page=" + page.toString()
                const nextTitle = 'Home';
                const nextState = { additionalInformation: 'Updated the URL with JS' };

                window.history.replaceState(nextState, nextTitle, nextURL);
                updateActivePage(next)
                updateGrid(page);
            })

            next.innerHTML = "&raquo;"
            paginationContainer.appendChild(next)

 
        }

        catch (e) {
            console.error(e)
        }
   }
</script>

@*Updates the DOM after client receives message from the server*@
<script>
    hubConnection.on("ReceiveMessage", async (user, message) => {
        try {
            const { polls } = await getData();

            const firstVotes = document.querySelectorAll(".first-votes");
            const secondVotes = document.querySelectorAll(".second-votes");

            if (firstVotes.length === 0 || secondVotes.length === 0) throw new Error('votes els not found.');
            if (polls.length !== firstVotes.length || polls.length !== secondVotes.length) throw new Error('length does not match');

            polls.forEach((poll, i) => {
                firstVotes[i].innerHTML = poll.firstVoteCount;
                secondVotes[i].innerHTML = poll.secondVoteCount;
            });
        } catch (e) {
            console.error(e);
        }
    });
</script>

@*Opens and closes modal window*@
<script>

    const modal = document.getElementById("myModal");
    const btn = document.getElementById("myBtn");
    const span = document.getElementsByClassName("close")[0];

    btn.addEventListener('click', () => modal.style.display = "block") 

    span.addEventListener('click', () => modal.style.display = "none")

    window.addEventListener('click', (e) => { 
        if (event.target == modal) modal.style.display = "none"
    })
</script>
