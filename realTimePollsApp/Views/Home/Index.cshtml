@model realTimePolls.Models.PollsList
@{
    ViewBag.Message = @Model.UserProfilePicture;
}

<div class="text-center ">
    <input type="text" placeholder="Search by title" id="search-box"/>
    <div >
        <label for="genre-search" class="required">Genre</label> @*change to html helper*@
        <select id="genre-search" name="genre-search" class="Genre"></select>
    </div>
    <div class="container pt-0 mt-0">    
        <table class="rwd-table">
            <tbody class="table-body">
                <tr>
                    <th>User</th>
                    <th>Title</th>
                    <th>First Option</th>
                    <th>Second Option</th>
                    <th>First Vote Count</th>
                    <th>Second Vote Count</th>
                    <th>Genre</th>
                </tr>

                @*Displays list of polls*@
                @if (Model != null)
                {
                    foreach (var poll in Model.Polls)
                    {
                        <tr class="table-data" onclick="window.location.href='@Url.Action("Index", "Poll", new { polltitle = poll.Poll.Title, pollid = poll.Poll.Id, userid = poll.Poll.UserId })'">
                            <td data-th="User" data-id="@poll.Poll.Id" class="table-cell" >
                                <div class="user-flex">
                                  <img src="@poll.ProfilePicture" alt="user-image" class="avatar"/>
                                    <p class="user-text">@poll.UserName</p>
                                </div>
                            </td>
                            <td data-th="Title" class="table-cell"  >
                                @poll.Poll.Title
                            </td>
                            <td data-th="First Option" class="table-cell">
                                @poll.Poll.FirstOption
                            </td>
                            <td data-th="Second Option" class="table-cell">
                                @poll.Poll.SecondOption
                            </td>
                            <td data-th="First Count" class="table-cell" >
                                <span class="first-votes">@poll.FirstVoteCount</span>
                            </td>
                            <td data-th="Second Count" class="table-cell" >
                                <span class="second-votes">@poll.SecondVoteCount</span>
                            </td>
                            <td data-th="Genre" class="table-cell">
                                <span class="second-votes">@poll.Poll.Genre.Name</span>
                            </td>
                        </tr>
                    }

                }
            </tbody>
        </table>
    </div>
</div>




<div id="pagination-container" class="pagination">
    @*Pagination Widget created here*@
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>



<style>

    .pagination {
        display: inline-block;
    }

        .pagination a {
            color: black;
            float: left;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color .3s;
        }

            .pagination a.active {
                background-color: #4CAF50;
                color: white;
            }

            .pagination a:hover:not(.active) {
                background-color: #ddd;
            }

    .flex-column-user {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        align-items: center
    }

    .user-text {
        margin-bottom: 0;
        text-align: center
    }

</style>


@* Connects client to signalR server *@
<script>
    //Set the default url to the first page when refreshing
    if (window.location.href !== "https://localhost:44378/?page=1") window.location.replace("https://localhost:44378/?page=1");

    const oldData = @Html.Raw(Json.Serialize(@Model));

    const getData = async (page) => {

        const baseURL = "https://localhost:44378/Polls/Index"
        const url = page === undefined ? baseURL : baseURL + `?page=${page}`

        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return polls
    }

    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/pollHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await hubConnection.start();
            console.log("SignalR Connected.");
            // if (document.getElementById("pagination-container")) return
            await getPolls();

        } catch (e) {
            console.error("Failed to connect with SignalR", e);
        }
    }

    hubConnection.onclose(async () => {
        await start();
    });
    async function getPolls() {
        try {
            const { polls, pollCount } = await getData()
            createPaginationButtons(polls, pollCount)
        } catch (e) {
            console.error("Failed to get polls", e);
        }
    }
    // Start the connection.
    start();
</script>

@* Filters grid by genre *@

<script>

    const getGenreResults = async (page, genreId) => {

        const url = "https://localhost:44378/Polls/GetGenreResults/" + "?page=" + page

        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'

            },
            body: JSON.stringify(genreId)
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        return await response.json()
    }

    const searchParams = new URLSearchParams(window.location.search);
    const page = searchParams.get('page')

    const genreDropdown = document.querySelector("#genre-search")
    genreDropdown.addEventListener('change', async (e) => {
        const baseURL = "https://localhost:44378/"
        const currentUrl = window.location.href
        const genreId = e.target.value
        const genreName = e.target[genreId - 1].textContent
        const nextState = { additionalInformation: 'Updated the URL with JS' };
        const nextTitle = 'Home';

    searchParams.set('genreId', genreId)
    nextURL = "?genreId=" + genreId + "&page=" + page
       


        nextURL = baseURL + nextURL
        
        const { polls, pollCount } = await getGenreResults(page, genreId)

        console.log(polls, pollCount)

        window.history.replaceState(nextState, nextTitle, nextURL);

        updateGrid(page, null, genreId)
        createPaginationButtons(polls, pollCount, genreId)
        updateActivePage()
    })


</script>


@*Grid pagination*@
<script>
    async function getPolls() {
        try {
            const { polls, pollCount } = await getData()
            createPaginationButtons(polls, pollCount)
        } catch (e) {
            console.error("Failed to get polls", e);
        }
    }

    const updateGrid = async (page, text, genreId) => {
        try {
            let polls;
            let pollCount
            const searchParams = new URLSearchParams(window.location.search);
            const page = searchParams.get('page')
            const currentUrl = window.location.href

            if (currentUrl.includes("search")) {
                ({ polls, pollCount } = await getSearchResults(text, page));

            } else if (currentUrl.includes("genre")) {
                ({polls, pollCount} = await getGenreResults(page, genreId ))
            } else {
                ({ polls, pollCount } = await getData(page));

            }

            const table = document.querySelector(".rwd-table")
            const tableBody = document.querySelector(".table-body")

            document.querySelectorAll(".table-data").forEach(row => row.remove())

            const cells = [
                "User",
                "Title",
                "First Option",
                "Second Option",
                "First Count",
                "Second Count",
                "Genre"
            ]

            polls.forEach(poll => {
                const tableRow = document.createElement("tr")
                tableRow.classList.add("table-data")
                table.appendChild(tableRow)

                tableRow.addEventListener('click', () => {
                    window.location.href = `/Poll?polltitle=${poll.poll.title}&pollid=${poll.poll.id}&userid=${poll.poll.userId}`
                })

                for (let i = 0; i <= 6; i++) {
                    const tableCell = document.createElement("td")
                    tableCell.setAttribute("data-th", cells[i])
                    if (i === 0) tableCell.setAttribute("data-id", poll.poll.id)

                    let content;

                    switch (cells[i]) {
                        case "User":
                            const userContainer = document.createElement('div')
                            userContainer.classList.add('user-flex')
                            userContainer.classList.add("flex-column-user")

                            const avatar = document.createElement('img')
                            avatar.src = poll.profilePicture
                            avatar.classList.add("avatar")
                            avatar.alt = 'user image'

                            const userName = document.createElement('p')
                            userName.innerHTML = poll.userName
                            userName.classList.add("user-text")

                            userContainer.appendChild(avatar)
                            userContainer.append(userName)

                            tableCell.appendChild(userContainer)
                            tableRow.appendChild(tableCell)
                            continue;
                        case "Title":
                            const link = document.createElement("a")
                            link.innerHTML = poll.poll.title
                            content = poll.poll.title

                            tableRow.appendChild(tableCell)
                            tableCell.append(link)
                            continue;
                        case "First Option":
                            content = poll.poll.firstOption
                            break;
                        case "Second Option":
                            content = poll.poll.secondOption
                            break;
                        case "First Count":
                            tableCell.classList.add("first-votes")
                            content = poll.firstVoteCount
                            break;
                        case "Second Count":
                            tableCell.classList.add("second-votes")
                            content = poll.secondVoteCount
                            break;
                        case "Genre":
                            content = poll.poll.genre.name
                            break;
                        default:
                            throw new Error("Unable to update grid")
                    }

                    tableCell.innerHTML = content
                    tableCell.classList.add("table-cell")
                    tableRow.appendChild(tableCell)
                    tableBody.append(tableRow)

                }
            })
            return {
                polls,
                pollCount
            }
        }
        catch (e) {
            console.error(e)
        }
    }

    const updateActivePage = (node) => {
        const searchParams = new URLSearchParams(window.location.search);
        const page = searchParams.get('page')

        const btns = document.querySelectorAll(".pagination-btn")

        btns.forEach((btn, i) => {
            btn.classList.remove("active")
            if (btn.innerHTML === page) btn.classList.add("active")
        })
    }

    const getPaginationLength = (pollsLength) => {
        let paginationLength;

        if (pollsLength / 5 !== 0) {
            paginationLength = Math.ceil(pollsLength / 5)
        } else {
            paginationLength = pollsLength / 5
        }
        return paginationLength
    }


    function createPaginationButtons(polls, pollCount) {

        try {
            if (pollCount === 0) return

            const paginationContainer = document.getElementById("pagination-container")

            while (paginationContainer.hasChildNodes()) {
                paginationContainer.removeChild(paginationContainer.lastChild)
            }

            const searchParams = new URLSearchParams(window.location.search);
            let page = searchParams.get('page')
            let search = searchParams.get("search")

            const baseURL = "https://localhost:44378/"
            const currentUrl = window.location.href

            const pollsLength = pollCount
            const paginationLength = getPaginationLength(pollsLength)


            for (let i = 1; i <= paginationLength; i++) {
                if (i === 1) {
                    const prev = document.createElement("a")
                    prev.innerHTML = "&laquo;"

                    prev.addEventListener('click', (e, polls, pollsLength) => {
                        if (page === null || page == 1 || paginationLength == 1) return

                        page = parseInt(page) - 1

                        let nextURL;
                        if (currentUrl.includes("search")) {
                            nextURL = "?search=" + search + "&page=" + page.toString()
                        } else if (currentUrl.includes("genreId")) {
                            nextURL = "?genreId=" + genreId + "&page=" + page.toString()
                        } else {
                            nextURL = "?page=" + page.toString()
                        }

                        nextURL = baseURL + nextURL

                        const nextTitle = 'Home';
                        const nextState = { additionalInformation: 'Updated the URL with JS' };

                        window.history.replaceState(nextState, nextTitle, nextURL);
                        updateActivePage(next)
                        updateGrid(page, search, genreId);
                    })

                    paginationContainer.appendChild(prev)
                }

                const btn = document.createElement("a")
                btn.classList.add("pagination-btn")
                btn.innerHTML = [i]
                paginationContainer.appendChild(btn)

                btn.addEventListener('click', async (e) => {
                    if (e.target.innerHTML === page || paginationLength == 1) return
                   
                    page = btn.innerHTML

                    let nextURL;
                    if (currentUrl.includes("search")) {
                        nextURL = "?search=" + search + "&page=" + page.toString()
                    } else if (currentUrl.includes("genreId")) {
                        nextURL = "?genreId=" + genreId + "&page=" + page.toString()
                    } else {
                        nextURL = "?page=" + page.toString()
                    }

                    nextURL = baseURL + nextURL

                    const nextTitle = 'Home';
                    const nextState = { additionalInformation: 'Updated the URL with JS' };


                    if (currentUrl.includes("search")) {
                        ({ polls, pollCount } = await getSearchResults(search, page));

                    } else if (currentUrl.includes("genre")) {
                        ({ polls, pollCount } = await getGenreResults(page, genreId))
                    } else {
                        ({ polls, pollCount } = await getData(page));

                    }

                    window.history.replaceState(nextState, nextTitle, nextURL);

                    updateActivePage(btn)
                    page = btn.innerHTML
                    updateGrid(page, search, genreId);
                })
            }

            const btns = document.querySelectorAll(".pagination-btn")

            btns.forEach((btn, i) => {
                if (btn.innerHTML === page) btn.classList.add("active")
                if (page === null && i === 0) btn.classList.add("active")

            })

            const next = document.createElement("a")
            let genreId = searchParams.get("genreId")
            next.addEventListener('click', async (e) => {
                let pollCount;
                if (page === null) page = 2

                if (currentUrl.includes("search")) {
                    ({ polls, pollCount } = await getSearchResults(search, page));

                } else if (currentUrl.includes("genre")) {
                    ({ polls, pollCount } = await getGenreResults(page, genreId))
                } else {
                    ({ polls, pollCount } = await getData(page));

                }

                const paginationLength = getPaginationLength(pollCount)

                if (paginationLength == page || pollCount == 1) return

                page = parseInt(page) + 1

                let nextURL;
                if (currentUrl.includes("search")) {
                    nextURL = "?search=" + search + "&page=" + page.toString()
                } else if (currentUrl.includes("genreId")) {
                    nextURL = "?genreId=" + genreId + "&page=" + page.toString()
                } else {
                    nextURL = "?page=" + page.toString()
                }
                
                nextURL = baseURL + nextURL

                const nextTitle = 'Home';
                const nextState = { additionalInformation: 'Updated the URL with JS' };

                window.history.replaceState(nextState, nextTitle, nextURL);
                updateActivePage(next)
                updateGrid(page, search, genreId);
            })

            next.innerHTML = "&raquo;"
            paginationContainer.appendChild(next)
        }
        catch (e) {
            console.error(e)
        }
    }
</script>

@*Updates the DOM after client receives message from the server*@
<script>
    hubConnection.on("ReceiveMessage", async (user, message) => { //maybe add this to the sharedlayout instead
        try {
            let polls;
            const currentUrl = window.location.href
            console.log('received')
            const searchParams = new URLSearchParams(window.location.search);
            let page = searchParams.get('page')
            let search = searchParams.get('search')

            if (currentUrl.includes("search")) {
                ({ polls } = await getSearchResults(search, page))
            } else {
                ({ polls } = await getData(page))
            }

            const firstVotes = document.querySelectorAll(".first-votes");
            const secondVotes = document.querySelectorAll(".second-votes");

            polls.forEach((poll, i) => {
                const currentPollId = firstVotes[i].previousElementSibling.previousElementSibling.previousSibling.previousElementSibling.dataset.id

                if (poll.poll.id == currentPollId &&
                    (poll.firstVoteCount != firstVotes.innerHTML || poll.secondVoteCount != secondVotes.innerHTML)) {
                    firstVotes[i].innerHTML = poll.firstVoteCount
                    secondVotes[i].innerHTML = poll.secondVoteCount
                }
            })

        } catch (e) {
            console.error(e);
        }
    });
</script>

@* Gets search results and updates DOM *@
<script>
    const getSearchResults = async (text, page) => {
        const url = "https://localhost:44378/Polls/GetSearchResults?search=" + text + "&page=" + page

        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return polls
    }

    const updateUrl = (text) => {
        let nextURL
        const searchParams = new URLSearchParams(window.location.search);
        let page = searchParams.get('page')

        const currentUrl = window.location.href
        const baseUrl = "https://localhost:44378/"

        if (text === "") {
            nextURL = baseUrl + "?page=1"
        } else {

            nextURL = !currentUrl.includes("search") ? "?search=" + text + "&page=" + 1 : "?search=" + text + "&page=1"
            nextURL = baseUrl + nextURL
        }

        const nextTitle = 'Home';
        const nextState = { additionalInformation: 'Updated the URL with JS' };
        window.history.replaceState(nextState, nextTitle, nextURL);

    }

    const searchBox = document.getElementById("search-box")

    searchBox.addEventListener('input', async (e) => {
        try {
            updateUrl(e.target.value)
            const { polls, pollCount } = await updateGrid(null, e.target.value)
            createPaginationButtons(polls, pollCount)
        }
        catch (e) {
            console.error(e)
        }
    })
</script>