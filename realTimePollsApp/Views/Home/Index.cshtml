@model realTimePolls.Models.PollsList

<div class="text-center">
    <button id="myBtn">Create Poll</button>
    <div id="myModal" class="modal">

        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>Create Poll</h2>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "Poll", FormMethod.Post))
                {
                    <div>
                        @Html.LabelFor(model => model.Poll.Title)
                        @Html.TextBoxFor(model => model.Poll.Title, new { @class = "input-class", @required="required" })
                    </div>
                    <div>
                        @Html.LabelFor(model => model.Poll.FirstOption)
                        @Html.TextBoxFor(model => model.Poll.FirstOption, new { @class = "input-class", @required = "required" })
                    </div>
                    <div>
                        @Html.LabelFor(model => model.Poll.SecondOption)
                        @Html.TextBoxFor(model => model.Poll.SecondOption, new { @class = "input-class", @required = "required" })
                    </div>
                    <div>
                        <input type="submit" value="Create Poll" class="btn btn-primary" />
                    </div>
                }
            </div>
            <div class="modal-footer">
                <h3>Modal Footer</h3>
            </div>
        </div>
    </div>

    <div>
        @if (Context.User.Identity.IsAuthenticated)
        {
            <h2 class="logo welcome">Welcome, @User.Identity.Name</h2>
        }
    </div>

   

        @*Displays list of polls*@
      
        @if (Model != null)
        { 
            foreach (var poll in Model.Polls)
            {   <ol>
                @Html.ActionLink(poll.Title, "Index", "Poll", new { data = poll.Title, pollid = poll.Id, userid = poll.UserId }, null)
                <li>First Option: @poll.FirstOption</li>
                <li>Second Option: @poll.SecondOption</li>
                <li class="first-votes">@poll.FirstVotes</li>
                <li class="second-votes">@poll.SecondVotes</li>
                </ol>

           }    

        }

    <form asp-controller="Home" asp-action="Poll" method="post" id="form">
        <div>
            <label for="cars">Choose a poll:</label>
            <select name="pollName" id="polls">
                @if (Model != null)
                {
                    @foreach (var poll in Model.PollTitles)
                    {
                        <option value="@poll">@poll</option>
                    }
                    <button type="submit">Submit</button>
                    <div>@Model.FirstOption</div>
                    <div>@Model.SecondOption</div>
                }

            </select>


        </div>
    </form>
    <button id="test-btn">SEND TO ALL USERS</button>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>
    const getData = async () => {
        const url = "https://localhost:44378/Home/Index"
        const userId = {
            Id: hubConnection.connection.connectionId
        }
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Accept': 'application/json'
            },
            body: JSON.stringify(userId)

        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return polls
    }

    try {
        var oldData = @Html.Raw(Json.Serialize(@Model));

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/pollHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        async function start() {
            try {
                await hubConnection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        hubConnection.onclose(async () => {
            await start();
        });

        // Start the connection.
        start();

    }
    catch (e) {
        console.error(e)
    }
    
    hubConnection.on("ReceiveMessage", async (user, message) => {
        try {
            const newData = await getData();

            const firstVotes = document.querySelectorAll(".first-votes");
            const secondVotes = document.querySelectorAll(".second-votes");

            if (firstVotes.length === 0 || secondVotes.length === 0) throw new Error('votes els not found.');
            if (newData.length !== firstVotes.length || newData.length !== secondVotes.length) throw new Error('length does not match');

            newData.forEach((data, i) => {
                firstVotes[i].innerHTML = data.firstVotes;
                secondVotes[i].innerHTML = data.secondVotes;
            });

        } catch (e) {
            console.error(e.message);
        }
    });
</script>
<script>

    var modal = document.getElementById("myModal");
    var btn = document.getElementById("myBtn");
    var span = document.getElementsByClassName("close")[0];

    btn.onclick = function () {
        modal.style.display = "block";
    }

    span.onclick = function () {
        modal.style.display = "none";
    }

    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
</script>
