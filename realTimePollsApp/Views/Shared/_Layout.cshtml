<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - realTimePolls</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/realTimePolls.styles.css" asp-append-version="true" />
    <link href='//fonts.googleapis.com/css?family=Roboto:100,400,300' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@600&display=swap" rel="stylesheet">
</head>
<body>

    <header>
        <nav class="navbar">
            <a href ="/?page=1">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24">
                    <path fill="white" d="M13 10h7l-9 13v-9H4l9-13z" />
                </svg>
            </a>
            @if (Context.User.Identity.IsAuthenticated)
            {
            }
            <div id="myModal" class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <span class="close">&times;</span>
                        <h2>Create Poll</h2>
                    </div>
                    <div class="modal-body">
                        @using (Html.BeginForm("Create", "Poll", FormMethod.Post))
                        {
                            <div>
                                @Html.Label("Title", "Poll Title") @*first param is for, second is label text*@
                                @Html.TextBox("Title", string.Empty, new { @class = "input-class", @required = "required" }) @*first param is name, secodn is value*@
                            </div>
                            <div>
                                @Html.Label("FirstOption", "First Option")
                                @Html.TextBox("FirstOption", string.Empty, new { @class = "input-class", @required = "required" })
                            </div>
                            <div>
                                @Html.Label("SecondOption", "Second Option")
                                @Html.TextBox("SecondOption", string.Empty, new { @class = "input-class", @required = "required" })
                            </div>
                            <div>
                                <label for="genre">Genre</label> @*change to html helper*@
                                <select id="genre" name="genre" class="Genre"></select>
                            </div>
                            <div>
                                <input type="submit" value="Create Poll" class="btn btn-primary" />
                            </div>
                        }
                    </div>

                    <div class="modal-footer">
                        <h3>Modal Footer</h3>
                    </div>
                </div>
            </div>
            @if (Context.User.Identity.IsAuthenticated)
            {
                <div class="username-flex">
                    <div class="">
            @* <h2 class="username">@User.Identity.Name</h2> Maybe use this on larger displays*@
                        <div class="d-flex justify-content-end">
                            <button id="create-btn" class="btn btn-info fw-bold" role="button">
                                + Create Poll
                            </button>
                        </div>
                    </div>
                     <div class="dropdown">
                        <div class="dropdown-btn" type="button">
                            <img src="@ViewBag.Message" class="navbar-avatar" />
                        </div>
                        <ul class="dropdown-menu dropdown-menu-navbar">
                            <a asp-controller="Login" class="dropdown-item " asp-action="Logout">Profile</a>
                            <a asp-controller="Login" class="dropdown-item logout-btn " asp-action="Logout">Logout</a>
                        </ul>
                     </div>
                </div>
            }
            else
            {
            <a asp-controller="Login" class="sign-in-link" asp-action="Login">Sign-In</a>
            }
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <style>
        .navbar-avatar {
            width: 40px;
            border-radius: 15px;
            margin-right: 0px;
        }
        .logout-btn {
            color: red
        }

        .dropdown-menu-navbar {
            right: -10px
        }

        .username {
            color: white
        }

        .username-flex {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .dropdown-item {
            padding-top: 10px;
            padding-bottom: 10px;
            font-weight: bold
        }

        #create-btn{
            background-color: black;
            color: white;
            border-color: transparent;
        }

            #create-btn:active, #create-btn:hover {
                background-color: #0dcaf0
        }

    </style>

@* Populates Genre Dropdown List *@

<script> 
    const getDropdownList = async () => {
        const url = "https://localhost:44378/Polls/GetDropdownList"

        const response = await fetch(url, {
            method: "GET",
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch profile picture")

        const { options } = await response.json()
        const dropdown = document.querySelector(".Genre")

        for (let i = 0; i < options.length; i++) {
            const option = document.createElement("option")
            option.value = options[i].id
            option.innerHTML = options[i].name
            dropdown.appendChild(option)
        }
    }
    getDropdownList();
</script>


@* Sets Profile Picture *@    

<script>
        const getProfilePicture = async () => {
            const url = "https://localhost:44378/Home/GetUserProfilePicture"

            const response = await fetch(url, {
                method: "GET",
                headers: {
                    'Accept': 'application/json'
                }
                    
            })

            if (!response.ok) throw new Error("Failed to fetch profile picture")

            const profilePicture = await response.json()
            const avatar = document.querySelector(".navbar-avatar")
            avatar.setAttribute("src", profilePicture)
        }
        getProfilePicture();

    </script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        console.log(@Html.Raw(Json.Serialize(@Model)))
        const dropdown = document.querySelector(".dropdown")
        const ul = document.querySelector(".dropdown-menu")
        dropdown.addEventListener('click', (e) => {
            e.currentTarget.classList.toggle("show")
            ul.classList.toggle("show")
        })

    </script>

@*Opens and closes modal window*@

    <script>

        const modal = document.getElementById("myModal");
        const btn = document.getElementById("create-btn");
        const span = document.getElementsByClassName("close")[0];

        btn.addEventListener('click', () => modal.style.display = "block")

        span.addEventListener('click', () => modal.style.display = "none")

        window.addEventListener('click', (e) => {
            if (event.target == modal) modal.style.display = "none"
        })
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
