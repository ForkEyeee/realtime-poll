<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - realTimePolls</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/realTimePolls.styles.css" asp-append-version="true" />
    <link href="//fonts.googleapis.com/css?family=Roboto:100,400,300" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@600&display=swap" rel="stylesheet">
</head>

<body>

    <header>
        <nav class="navbar">
            <a href="/?page=1">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24">
                    <path fill="white" d="M13 10h7l-9 13v-9H4l9-13z" />
                </svg>
            </a>
            <div id="myModal" class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h2 class="fw-bold mb-0" >Create Poll</h2>
                        <span class="close">&times;</span>
                    </div>
    
                    <div class="modal-body">
                        @using (Html.BeginForm("Create", "Poll", FormMethod.Post))
                        {
                            <div>
                                @Html.Label("Title", "Poll Title", new {@class = "required"}) @*first param is for, second is label text*@
                                @Html.TextBox("Title", string.Empty, new { @class = "input-class", @required = "required", @maxLength = 25 }) @*first param is name, secodn is value*@
                            </div>
                            <div>
                                @Html.Label("FirstOption", "First Option", new { @class = "required" })
                                @Html.TextBox("FirstOption", string.Empty, new { @class = "input-class", @required = "required", @maxLength = 15 })
                            </div>
                            <div>
                                @Html.Label("SecondOption", "Second Option", new { @class = "required" })
                                @Html.TextBox("SecondOption", string.Empty, new { @class = "input-class", @required = "required", @maxLength = 15 })
                            </div>
                            <div class="d-flex flex-column">
                                <label for="genre" class="required">Genre</label> @*change to html helper*@
                                <select id="genre" name="genre" class="Genre ">
                                    <option disabled="disabled" selected="selected">Choose a genre</option>
                                </select>
                            </div>
                            <div class="d-flex justify-content-end gap-3">
                                <input type="button" id="cancel-btn" value="Cancel" class="btn btn-secondary" />
                                <input type="submit" value="Submit" class="btn  btn-primary  " />
                            </div>
                        }
                    </div>

     @*                <div class="modal-footer">
                        <h3>Modal Footer</h3>
                    </div> *@
                </div>
            </div>
            @if (Context.User.Identity.IsAuthenticated)
            {
                <div class="username-flex">
                    <div class="">
                        @* <h2 class="username">@User.Identity.Name</h2> Maybe use this on larger displays*@
                        <div class="d-flex justify-content-end">
                            <button id="create-btn" class="btn btn-info fw-bold" role="button">
                                + Create Poll
                            </button>

                          
                        </div>
                    </div>
                    <div class="dropdown" >
                        <div class="dropdown-btn" type="button" >
                            <img src="@ViewBag.Message" class="navbar-avatar" />
                        </div>
                        <ul class="dropdown-menu dropdown-menu-navbar " >
                            <a asp-controller="Login" class="dropdown-item logout-btn " asp-action="Logout">Logout</a>
                        </ul>
                    </div>
                </div>
            }
            else
            {
                <a asp-controller="Login" class="sign-in-link" asp-action="Login">Sign-In</a>
            }
        </nav>
    </header>
    <div class="d-flex flex-column justify-content-between main-container mb-0">
        <div class="container">
            <main role="main" class="pb-3">
                @RenderBody()
            </main>
        </div>

        <footer class="footer">
            <div class="d-flex gap-3">
                <svg class="home-logo" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24">
                    <path fill="white" d="M13 10h7l-9 13v-9H4l9-13z" />
                </svg>
                <p class="proj-title">Real Time Poll</p>
            </div>
            <div class=" d-flex proj-title">
                <p>ForkEyeee</p>
            </div>
            <div>
                <a target=”_blank” href="https://github.com/ForkEyeee/realtime-poll"><img src="/images/github-logo.svg" class="logo" /></a>
                <a target=”_blank” href ="https://github.com/ForkEyeee/realtime-poll"><img src="/images/github.png" class="logo-second" /></a>
            </div>
        </footer>

    </div>

    <style>

        .main-container {
            height: 100vh
        }

        .dropdown-menu {
            left: initial
        }

        .modal-body {
            display: flex;
            width: 100%;
            flex-direction: row;
            justify-content: center;
        }


        .Genre {
            background-color: #f9f9f9; 
            border: 1px solid #ccc; 
            padding: 10px; 
            width: 50%; 
            font-size: 16px;
            border-radius: 5px; 
        }
        .Genre:hover {
            border-color: #888; 
            cursor: pointer
        }

        .Genre {
            position: relative;
        }

        .Genre:after {
            content: '▼';
            position: absolute;
            right: 45px;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none; 
            color: #333; 
        }

        div.d-flex.flex-column {
            display: flex;
            flex-direction: column;
            margin-bottom: 20px; 
        }

       .modal {
            background: #2D3748;
       }

        .required:after {
            content: " *";
            color: red;
        }

        .required {
            font-weight: bold
        }

        input[type=text] {
            width: 100%;
            border: 2px solid #aaa;
            border-radius: 4px;
            margin: 8px 0;
            outline: none;
            padding: 8px;
            box-sizing: border-box;
            transition: .3s;
        }

        input[type=text]:focus {
            border-color: dodgerBlue;
            box-shadow: 0 0 8px 0 dodgerBlue;
        }

        .navbar-avatar {
            width: 40px;
            border-radius: 15px;
            margin-right: 0px;
        }

        .logout-btn {
            color: red
        }

        .dropdown-menu-navbar {
            right: -10px
        }

        .username {
            color: white
        }

        .username-flex {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .dropdown-item {
            padding-top: 10px;
            padding-bottom: 10px;
            font-weight: bold
        }

        #create-btn {
            background-color: black;
            color: white;
            border-color: transparent;
        }

        #create-btn:active, #create-btn:hover {
            background-color: #0dcaf0
        }

        .pagination {
            justify-content:center
        }

        .close {
           color: #aaa;
           float: right;
           font-size: 28px;
           font-weight: bold;
        }

       .close:hover, 
       .close:focus {
        color: red;
        cursor: pointer;

    }
    </style>

    @* Populates Genre Dropdown List *@

    <script>
        const getDropdownList = async () => {
            const url = "https://localhost:8080/Polls/GetDropdownList"

            const response = await fetch(url, {
                method: "GET",
                headers: {
                    'Accept': 'application/json'
                }
            })

            if (!response.ok) throw new Error("Failed to fetch profile picture")

            const { options } = await response.json()
            const dropdown = document.querySelectorAll(".Genre")

            dropdown.forEach(element => {
                for (let i = 0; i < options.length; i++) {
                    const option = document.createElement("option")
                    
                    option.value = options[i].id
                    option.innerHTML = options[i].name
                    element.appendChild(option)

                }
            })
        }
        getDropdownList();
    </script>


    @* Sets Profile Picture *@

    <script>
        const getProfilePicture = async () => {
            const url = "https://localhost:8080/Home/GetUserProfilePicture"

            const response = await fetch(url, {
                method: "GET",
                headers: {
                    'Accept': 'application/json'
                }

            })

            if (!response.ok) throw new Error("Failed to fetch profile picture")

            const profilePicture = await response.json()
            const avatar = document.querySelector(".navbar-avatar")

            if (!profilePicture) return

            avatar.setAttribute("src", profilePicture)
        }
        getProfilePicture();

    </script>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    
 @* Add event listener to genre dropdowns *@

<script>
        const initializeDropdowns = () => {
         console.log(@Html.Raw(Json.Serialize(@Model)))

        const dropdown = document.querySelector(".dropdown")
        const ul = document.querySelector(".dropdown-menu")

        if(dropdown === null || ul === null) return

        dropdown.addEventListener('click', (e) => {
            e.currentTarget.classList.toggle("show")
            ul.classList.toggle("show")
        })
    }
    initializeDropdowns()
</script>

    @*Opens and closes modal window*@

    <script>

        const resetInputs = () => {
           const title = document.getElementById("Title")
           const firstOption = document.getElementById("FirstOption")
           const secondOption = document.getElementById("SecondOption")
           const genre = document.getElementById("genre")
           
           title.value = ""
           firstOption.value = ""
           secondOption.value = ""
           genre.value = "Choose a genre"
        }

        const initalizeModal = () => {
            const modal = document.getElementById("myModal");
            const span = document.getElementsByClassName("close")[0];
            const createBtn = document.getElementById("create-btn");
            const cancelBtn = document.querySelector("#cancel-btn")

            if (createBtn === null || cancelBtn === null) return


            createBtn.addEventListener('click', () => modal.style.display = "block")
            cancelBtn.addEventListener('click', () => {
                modal.style.display = "none"
                resetInputs()
            })

            span.addEventListener('click', () => {
                modal.style.display = "none"
                resetInputs()
            })

            document.addEventListener('click', (e) => {
                if (event.target == modal) {
                    modal.style.display = "none"
                    resetInputs()
                }
            })
        }

        initalizeModal()
    </script>

    @* Closes the profile dropdown menu *@

    <script>
        const initializeAvatar = () => {
            const avatar = document.querySelector(".dropdown")
            const dropdownMenu = document.querySelector(".dropdown-menu")

            if (!avatar || !dropdownMenu) return

                document.addEventListener('click', (e) => {
                    if (avatar.classList.contains("show") && dropdownMenu.classList.contains("show")) {
                        if (e.target.parentElement.parentElement !== avatar) {
                            avatar.classList.toggle("show")
                            dropdownMenu.classList.toggle("show")
                        } else {
                            avatar.classList.add("show")
                            dropdownMenu.classList.add("show")
                        }
                    }
                })
        }

    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
