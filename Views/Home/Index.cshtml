@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <div>
        <h2>Polls:</h2>
    </div>
    <br />
    <form>
        <label for="cars">Choose a poll:</label>
        @*Onchange, a GET request will be made, to retrieve the poll name being passed.
            The PollController will then return the necessary data to display the poll data to this view

            The option values should also be dynamically generated based on how many rows are in the database
            to do this, when the view loads, a GET request has to be made. we can do this in the Index
        *@
        <select name="polls" id="polls">
            @foreach (var poll in Model)
            {
                <option value="@poll">@poll</option>
            }
        </select>
    </form>
</div>
<script>
    console.log(@Html.Raw(Json.Serialize(Model)));
</script>
 
@* <ul>
    @foreach (var poll in Model)
    {
        <li>@poll.Name</li>
    }
</ul>  *@