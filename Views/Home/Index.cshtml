@model realTimePolls.Models.PollsViewModel

<div class="text-center">
    <button id="myBtn">Create Poll</button>
    <div id="myModal" class="modal">

        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>Create Poll</h2>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("CreatePoll", "Poll", FormMethod.Post))
                {   <div>
                        <label for="title">Poll Title</label>
                        <input id="title" name="title" type="text" value="" />

                    </div>
                    <div>
                        <label for="first-option">First Option</label>
                        <input id="first-option" name="first-option" type="text" value="" />
                    </div>
                    <div>
                        <label for="second-option">Second Option</label>
                        <input id="second-option" name="second-option" type="text" value="" />
                    </div>
                    <div>
                        <input type="submit" value="Create Poll" class="btn btn-primary" />
                    </div>
                }


            </div>
            <div class="modal-footer">
                <h3>Modal Footer</h3>
            </div>
        </div>

    </div>

    <div>
        @if (Context.User.Identity.IsAuthenticated)
        {
            <h2 class="logo welcome">Welcome, @User.Identity.Name</h2>
        }
    </div>
    <ol>
        @foreach (var poll in Model.Polls)
        {
            @Html.ActionLink(poll.Title, "Index", "Poll", new { data = poll.Title }, null)
            <li>@poll.FirstOption</li>    
            <li>@poll.SecondOption</li>
        }
    </ol>

    <form asp-controller="Home" asp-action="Poll" method="post" id="form">
        <div>
            <label for="cars">Choose a poll:</label>
            @*Onchange, a GET request will be made, to retrieve the poll name being passed.
            The PollController will then return the necessary data to display the poll data to this view

            The option values should also be dynamically generated based on how many rows are in the database
            to do this, when the view loads, a GET request has to be made. we can do this in the Index
            *@
            <select name="pollName" id="polls">
                @foreach (var poll in Model.PollTitles)
                {
                    <option value="@poll">@poll</option>
                }
            </select>
            <button type="submit">Submit</button>
            <div>@Model.FirstOption</div>
            <div>@Model.SecondOption</div>

        </div>
    </form>

</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<script>

    console.log(@Html.Raw(Json.Serialize(Model)))
    console.log(@Html.Raw(Json.Serialize(Model.Polls)))

    var modal = document.getElementById("myModal");

    var btn = document.getElementById("myBtn");

    var span = document.getElementsByClassName("close")[0];

    btn.onclick = function () {
        modal.style.display = "block";
    }

    span.onclick = function () {
        modal.style.display = "none";
    }

    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }
</script>

@* <ul>
    @foreach (var poll in Model)
    {
        <li>@poll.Name</li>
    }
</ul>  *@