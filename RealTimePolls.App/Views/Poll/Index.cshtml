@* @model PollItem;
 *@@{
    var userId = ViewData["UserId"];
    bool? currentVote = ViewData["CurrentVote"] as bool?;
}

<div class="main">
    <div class="card">
        <div class="container">
            @if (Model.Poll.Genre != null)
            {
                <h2 class="fw-bold genre-heading">@Model.Poll.Title</h2>
            }
            <form asp-controller="Poll" asp-action="Vote" method="post" id="form">
                <ul>
                    <li>
                        <input type="radio" id="vote-first" name="vote" value="Vote First" @(currentVote == null ?  "" : currentVote == true ? "checked='checked'" : "")>
                        <label for="vote-first">@Model.Poll.FirstOption</label>
                        <div class="d-flex flex-column vote-flex">
                            <p class="float-end first-vote-count">@Model.FirstVoteCount Votes</p>
                        </div>
                        <div class="check"><div class="inside"></div></div>
                    </li>
                    <li>
                        <input type="radio" id="vote-second" name="vote" value="Vote Second" @(currentVote == null ? "" : currentVote == false ? "checked='checked'" : "")>
                        <label for="vote-second">@Model.Poll.SecondOption</label>
                        <div class="d-flex flex-column vote-flex">
                            <p class="float-end second-vote-count">@Model.SecondVoteCount Votes</p>
                        </div>
                        <div class="check"><div class="inside"></div></div>
                    </li>
                </ul>
                <input type="hidden" name="pollid" value="@Model.Poll.Id" />
                <input type="hidden" name="userid" value="@Model.Poll.UserId" />
                <div class="d-flex justify-content-end gap-3 mt-3">
                    @if (Model.Poll.UserId == Convert.ToInt32(userId))
                    {
                        <input type="button" value="Delete" onclick="location.href='@Url.Action("Delete", "Poll", new { pollid = Model.Poll.Id })'" />
                    }
                    @if (Context.User.Identity.IsAuthenticated)
                    {
                        <button type="submit" class="btn btn-success" id="vote-btn">Submit Vote</button>
                    }
                </div>
            </form>
        </div>

    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.14/signalr.min.js"></script>


<style>

    
    .vote-flex {
        height: 100px;
        justify-content: flex-end;
        align-items: flex-end;
    }
    
    .container {
        margin-bottom: 0
    }    

    body, html {
        height: 100%;
        background: #222222;
        font-family: 'Lato', sans-serif;
    }
    ul li {
    color: black;
    display: block;
    position: relative;
    float: left;
    width: 100%;
    height: 100px;
    border-bottom: 1px solid #333;
}

    ul li input[type=radio] {
        position: absolute;
        visibility: hidden;
    }

    ul li label {
        display: block;
        color: black;
        position: relative;
        font-weight: 300;
        font-size: 1.35em;
        padding: 20px 25px 25px 80px;
        margin: 10px auto;
        height: 30px;
        z-index: 9;
        cursor: pointer;
        -webkit-transition: all 0.25s linear;
        float: left
    }

    ul li:hover label {
        color: #AAAAAA;
    }

    ul li .check {
        display: block;
        cursor: pointer;
        position: absolute;
        border: 5px solid black;
        border-radius: 100%;
        height: 25px;
        width: 25px;
        top: 31px;
        left: 21px;
        z-index: 5;
        transition: border .25s linear;
        -webkit-transition: border .25s linear;
    }


    ul li:hover .check {
        border: 5px solid #AAAAAA;
    }

    ul li .check::before {
        content: '';
        display: block;
        position: absolute;
        border-radius: 100%;
        height: 10px; 
        width: 10px; 
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        margin: auto;
        transition: background 0.25s linear;
        -webkit-transition: background 0.25s linear;
    }
</style>

@*Sets global base url*@

<script>
    const environment = @Html.Raw(Json.Serialize(@Model.EnvironmentName))
    const baseURL = environment === "Production" ? "https://realtime-poll.onrender.com/" : `https://localhost:${location.port}/`;
</script>

@* Connects client to signalR server *@

<script>

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/pollHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        async function start() {
            try {
                await hubConnection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        };

        hubConnection.onclose(async () => {
            await start();
        });

        // Start the connection.
        start();

        const getData = async (page) => {
        const url = page === undefined ? baseURL + "Polls/Index" : baseURL + "Polls/Index" `?page=${page}`

        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return polls
    }
</script>

@* Updates the DOM after client receives message from the server *@

<script>
    hubConnection.on("ReceiveMessage", async (user, message) => { 
        try {
 
            const { polls } = await getData();

            const firstOptionVotes = document.querySelector(".first-vote-count")
            const secondOptionVotes = document.querySelector(".second-vote-count")

            firstOptionVotes.textContent = polls[0].firstVoteCount + " Votes"
            secondOptionVotes.textContent = polls[0].secondVoteCount + " Votes"

        } catch (e) {
            console.error(e);
        }
    });
</script>
