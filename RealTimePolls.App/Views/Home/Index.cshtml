@model List<RealTimePolls.Models.ViewModels.HomeViewModel>;

<div class="text-center pt-0">
    @if (Context.User.Identity.IsAuthenticated)
    {
        <h3 class="text-break display-6 text-primary ">Welcome, @Context.User.Identity.Name</h3>
    }
    <div class="d-flex justify-content-center flex-column search">
        <input type="text" placeholder="Search by title" id="search-box" />
        <div class="d-flex gap-3">
            <select id="genre-search" name="genre-search" class="Genre w-100" placeholder="Test">
                <option disabled="disabled" selected="selected">Choose a genre to sort by...</option>
            </select>
            <button class="reset-btn btn btn-danger">Reset</button>
        </div>
    </div>
    <div class="main-display container pt-0 mt-0 gap-5 d-flex flex-column ">
        <h3 class="no-polls-msg">No polls found.</h3>
        <table class="rwd-table">
            <tbody id="data-container" class="table-body"></tbody>
        </table>
        <div id="pagination-container">
            @*Pagination Widget created here*@
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.14/signalr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/paginationjs@2.6.0/dist/pagination.min.js"></script>

<style>

    .pagination {
        display: inline-block;
    }

        .pagination a {
            color: black;
            float: left;
            padding: 8px 16px;
            text-decoration: none;
            transition: background-color .3s;
        }

            .pagination a.active {
                background-color: #4CAF50;
                color: white;
            }

            .pagination a:hover:not(.active) {
                background-color: #ddd;
            }

    .flex-column-user {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        align-items: center
    }

    .user-text {
        margin-bottom: 0;
        text-align: center
    }

    .no-polls-msg {
        display: none;
    }

</style>

@*Sets global base url*@

<script>
    const environment = @Html.Raw(Json.Serialize(@hostingEnv.EnvironmentName))
    const baseURL = environment === "Production" ? "https://realtime-poll.onrender.com/" : `https://localhost:${location.port}/`;
</script>

@* Connects client to signalR server *@

<script>
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/pollHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    async function start() {
        try {
            await hubConnection.start();
            console.log("SignalR Connected.");

        } catch (e) {
            console.error("Failed to connect with SignalR", e);
        }
    }

    hubConnection.onclose(async () => {
        await start();
    });

    // Start the connection.
    start();
</script>

@* Helper functions/Initialize event listeners *@

<script>
    function template(polls) {
        let html = `<tr>
                                    <th>User</th>
                                    <th>Title</th>
                                    <th>First Option</th>
                                    <th>Second Option</th>
                                    <th>First Vote Count</th>
                                    <th>Second Vote Count</th>
                                    <th>Genre</th>
                                </tr>`

        polls.forEach(poll => {

            html += `
                                    <tr class="table-data" onclick="window.location.href='/Poll?polltitle=${poll.title}&pollid=${poll.id}&userid=${poll.userId}'">
                                    <td data-th="User" data-id="${poll.id}" class="table-cell">
                                        <div class="user-flex">
                                            <img src="${poll.user.profilePicture}" alt="user-image" class="avatar">
                                            <p class="user-text">${poll.user.name}</p>
                                        </div>
                                    </td>
                                    <td data-th="Title" class="table-cell">
                                        ${poll.title}
                                    </td>
                                    <td data-th="First Option" class="table-cell">
                                        ${poll.firstOption}
                                    </td>
                                    <td data-th="Second Option" class="table-cell">
                                        ${poll.secondOption}
                                    </td>
                                    <td data-th="First Count" class="table-cell">
                                        <span class="first-votes">${poll.firstVoteCount}</span>
                                    </td>
                                    <td data-th="Second Count" class="table-cell">
                                        <span class="second-votes">${poll.secondVoteCount}</span>
                                    </td>
                                    <td data-th="Genre" class="table-cell">
                                        <span>${poll.genre.name}</span>
                                    </td>
                                </tr>
                            `;
        });
        html += '</tbody></table>';
        return html;
    }

    const getData = async (page) => {

        const url = page === undefined ? baseURL + "api/GetPollsList" : baseURL + "api/GetPollsList" + `?page=${page}`
        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })
        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return { 
            polls: polls, 
            pollCount: polls.length
        }
    }

    const getSearchResults = async (text, genreId) => {
        const url = `${baseURL}api/GetSearchResults?search=${text}${genreId ? `&genreId=${genreId}` : ""}`

        const userId = {
            Id: hubConnection.connection.connectionId
        }

        const response = await fetch(url, {
            headers: {
                'Accept': 'application/json'
            }
        })

        if (!response.ok) throw new Error("Failed to fetch polls")

        const polls = await response.json()
        return {
            polls,
            pollCount: polls.length
        };
    }

    const checkPollCount = (polls) => {
        const tableBody = document.querySelector("#data-container");
        const paginationContainer = document.querySelector("#pagination-container")
        const noPollsMessage = document.querySelector(".no-polls-msg")

        if (polls.length === 0) {
            tableBody.style.display = "none"
            paginationContainer.firstElementChild.style.display = "none"
            noPollsMessage.style.display = "block"
            return true;
        } else {
            tableBody.style.display = "table-row-group"
            paginationContainer.firstElementChild.style.display = "flex"
            noPollsMessage.style.display = "none"
            return false
        }
    }

    const populateGrid = async () => {
        const paginationContainer = document.querySelector("#pagination-container")
        const noPollsMessage = document.querySelector(".no-polls-msg")
        const tableBody = document.querySelector("#data-container")

        const { polls, pollCount } = await getData();


        if (pollCount === 0) {
            tableBody.style.display = "none"
            paginationContainer.style.display = "none"
            noPollsMessage.style.display = "block"
        }
        $('#pagination-container').pagination({
            dataSource: polls,
            pageSize: 5,
            pageRange: 1,

            callback: function (data, pagination) {
                const nextState = { additionalInformation: 'Updated the URL with JS' };
                const nextTitle = 'Home';
                const buttonNumber = pagination.pageNumber

                nextURL = `?page=${buttonNumber}`
                nextURL = baseURL + nextURL

                window.history.replaceState(nextState, nextTitle, nextURL);

                var html = template(data);
                $('#data-container').html(html);
            }
        });
    }


    const resetSearch = () => {
        const resetBtn = document.querySelector(".reset-btn")
        const searchBox = document.getElementById("search-box")
        const genreDropdown = document.getElementById("genre-search")
        const noPollsMessage = document.querySelector(".no-polls-msg")
        const tableBody = document.querySelector("#data-container")

        resetBtn.addEventListener("click", (e) => {
            searchBox.value = ""
            genreDropdown.value = "Choose a genre to sort by..."

            if (noPollsMessage.style.display === "block") noPollsMessage.style.display = "none"
            if (tableBody.style.display === "none") tableBody.style.display = "block"

            populateGrid();
        })
    }

    resetSearch()
</script>


@* Populates the grid when the first page loads *@

<script>
    $(document).ready(function () {
        populateGrid();
    });
</script>

@* Populates the grid from search results *@

<script>
    try {
        const searchBox = document.getElementById("search-box")
        const genreDropdown = document.getElementById("genre-search")

        const populateGridFromSearch = async (search) => {
            const searchParams = new URLSearchParams(window.location.search);
            const page = searchParams.get('page')
            const genre = searchParams.get('genreId')
            const nextState = { additionalInformation: 'Updated the URL with JS' };
            const nextTitle = 'Home';
            let polls;
            let pollCount;
            const dataContainer = $('#data-container');

            let nextURL;
                
            nextURL = `?search=${search}${genre ? `&genreId=${genre}` : ""}`

            nextURL = baseURL + nextURL
            window.history.replaceState(nextState, nextTitle, nextURL);
            ({ polls, pollCount } = await getSearchResults(search, genre));

            if (checkPollCount(polls)) return

            $('#pagination-container').pagination({
                dataSource: polls,
                pageSize: 5,
                pageRange: 1,
                callback: function (data, pagination) {
                    var html = template(data);
                    dataContainer.html(html);
                }
            })
        };
        searchBox.addEventListener('input', async (e) => {
            populateGridFromSearch(e.target.value);
        });
    } catch (e) {
        console.error(e)
    }
</script>

@* Filters grid by genre *@

<script>
    const genreDropdown = document.querySelector("#genre-search")

    genreDropdown.addEventListener('change', async (e) => {
        try {
            const searchBox = document.getElementById("search-box")
            const searchParams = new URLSearchParams(window.location.search);
            const page = searchParams.get('page')
            const genreId = e.target.value
            const { polls, pollCount } = await getSearchResults(searchBox.value, genreId);

            if (checkPollCount(polls)) return

            $('#pagination-container').pagination({
                dataSource: polls,
                pageSize: 5,
                pageRange: 1,
                callback: function (data, pagination) {

                    const currentUrl = window.location.href

                    var dataContainer = $('#data-container');

                    const genreName = e.target[genreId - 1].textContent

                    const nextState = { additionalInformation: 'Updated the URL with JS' };
                    const nextTitle = 'Home';

                    nextURL = "?genreId=" + genreId + "&page=" + pagination.pageNumber
                    nextURL = baseURL + nextURL

                    window.history.replaceState(nextState, nextTitle, nextURL);

                    var html = template(data);
                    dataContainer.html(html);
                }
            })
        } catch (e) {
            console.error(e)
        };
    })
</script>

@* Updates the DOM after client receives message from the server *@

<script>
    hubConnection.on("ReceiveMessage", async (user, message) => {
        try {
            const currentUrl = window.location.href
            const searchParams = new URLSearchParams(window.location.search);
            let page = searchParams.get('page')
            let search = searchParams.get('search')

            const { polls } = await getData();

            const firstVotes = document.querySelectorAll(".first-votes");

            const firstVoteIds = Array.from(firstVotes).map(vote => parseInt(vote.parentElement.previousElementSibling.
                previousElementSibling.previousElementSibling.previousElementSibling.dataset.id))

            const secondVotes = document.querySelectorAll(".second-votes");

            const secondVoteIds = Array.from(secondVotes).map(vote => parseInt(vote.parentElement.previousElementSibling.
                previousElementSibling.previousElementSibling.previousElementSibling.dataset.id))

            for (let i = 0; i <= polls.length - 1; i++) {

                if (firstVoteIds.includes(polls[i].id) && firstVotes[i].innerHTML != polls[i].firstVoteCount ||
                    secondVoteIds.includes(polls[i].id) && secondVotes[i].innerHTML != polls[i].secondVoteCount) {
                    firstVotes[i].innerHTML = polls[i].firstVoteCount
                    secondVotes[i].innerHTML = polls[i].secondVoteCount
                    if (firstVotes[i].innerHTML > secondVotes[i].innerHTML) {
                        firstVotes[i].style.color = "green";
                        firstVotes[i].style.fontWeight = "bold";
                        firstVotes[i].style.transform = "scale(1.1)";
                        firstVotes[i].style.transition = "all 2s";

                        secondVotes[i].style.color = "red";
                        secondVotes[i].style.fontWeight = "bold";
                        secondVotes[i].style.transform = "scale(1.1)";
                        secondVotes[i].style.transition = "all 2s";
                    } else {
                        firstVotes[i].style.color = "red";
                        firstVotes[i].style.fontWeight = "bold";
                        firstVotes[i].style.transform = "scale(1.1)";
                        firstVotes[i].style.transition = "all 2s";

                        secondVotes[i].style.color = "green";
                        secondVotes[i].style.fontWeight = "bold";
                        secondVotes[i].style.transform = "scale(1.1)";
                        secondVotes[i].style.transition = "all 2s";
                    }
                }
            }
        } catch (e) {
            console.error(e);
        }
    });
</script>